'use strict';

var _ = require('lodash');
var path = require('path');

module.exports = {
  getCompiledType: getCompiledType,
  getType: getType,
  stripIgnoredBasePath: stripIgnoredBasePath,
  changeExt: changeExt
};

function getCompiledType(type) {
  // Accept an object with a 'type' property, or else assume a string
  type = _.get(type, 'type') || type;

  var typeMap = {
    css: ['sass', 'less', 'stylus'],
    js: ['coffee']
  };
  return _.findKey(typeMap, function (types) {
    return _.includes(types, type);
  });
}

function getType(ext) {
  var typeMap = {
    js: 'js',
    css: 'css',
    scss: 'sass',
    less: 'less',
    styl: 'stylus',
    coffee: 'coffee'
  };
  return typeMap[_.trimStart(ext, '.')];
}

function stripIgnoredBasePath(_path, basePaths) {
  // Remove dots and slashes to ensure we never write above root.
  var trimmedPath = _.trimStart(_path, './\\');

  var ignored = basePaths.find(function (base) {
    return _.startsWith(trimmedPath, _.trimEnd(base, './\\'));
  });
  var ignoredLength = ignored ? (ignored + path.sep).length : 0;
  return trimmedPath.substring(ignoredLength);
}

function changeExt(file, toExt, fromExt) {
  var _path$parse = path.parse(file),
      dir = _path$parse.dir,
      name = _path$parse.name;

  return path.join(dir, (fromExt ? path.basename(file, fromExt) : name) + toExt);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy91dGlsLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwicGF0aCIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRDb21waWxlZFR5cGUiLCJnZXRUeXBlIiwic3RyaXBJZ25vcmVkQmFzZVBhdGgiLCJjaGFuZ2VFeHQiLCJ0eXBlIiwiZ2V0IiwidHlwZU1hcCIsImNzcyIsImpzIiwiZmluZEtleSIsImluY2x1ZGVzIiwidHlwZXMiLCJleHQiLCJzY3NzIiwibGVzcyIsInN0eWwiLCJjb2ZmZWUiLCJ0cmltU3RhcnQiLCJfcGF0aCIsImJhc2VQYXRocyIsInRyaW1tZWRQYXRoIiwiaWdub3JlZCIsImZpbmQiLCJzdGFydHNXaXRoIiwidHJpbUVuZCIsImJhc2UiLCJpZ25vcmVkTGVuZ3RoIiwic2VwIiwibGVuZ3RoIiwic3Vic3RyaW5nIiwiZmlsZSIsInRvRXh0IiwiZnJvbUV4dCIsInBhcnNlIiwiZGlyIiwibmFtZSIsImpvaW4iLCJiYXNlbmFtZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxJQUFJQyxRQUFRLFFBQVIsQ0FBVjtBQUNBLElBQU1DLE9BQU9ELFFBQVEsTUFBUixDQUFiOztBQUVBRSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZDLGtDQURlO0FBRWZDLGtCQUZlO0FBR2ZDLDRDQUhlO0FBSWZDO0FBSmUsQ0FBakI7O0FBT0EsU0FBU0gsZUFBVCxDQUF5QkksSUFBekIsRUFBK0I7QUFDN0I7QUFDQUEsU0FBT1QsRUFBRVUsR0FBRixDQUFNRCxJQUFOLEVBQVksTUFBWixLQUF1QkEsSUFBOUI7O0FBRUEsTUFBTUUsVUFBVTtBQUNkQyxTQUFLLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsUUFBakIsQ0FEUztBQUVkQyxRQUFJLENBQUMsUUFBRDtBQUZVLEdBQWhCO0FBSUEsU0FBT2IsRUFBRWMsT0FBRixDQUFVSCxPQUFWLEVBQW1CO0FBQUEsV0FBU1gsRUFBRWUsUUFBRixDQUFXQyxLQUFYLEVBQWtCUCxJQUFsQixDQUFUO0FBQUEsR0FBbkIsQ0FBUDtBQUNEOztBQUVELFNBQVNILE9BQVQsQ0FBaUJXLEdBQWpCLEVBQXNCO0FBQ3BCLE1BQU1OLFVBQVU7QUFDZEUsUUFBSSxJQURVO0FBRWRELFNBQUssS0FGUztBQUdkTSxVQUFNLE1BSFE7QUFJZEMsVUFBTSxNQUpRO0FBS2RDLFVBQU0sUUFMUTtBQU1kQyxZQUFRO0FBTk0sR0FBaEI7QUFRQSxTQUFPVixRQUFRWCxFQUFFc0IsU0FBRixDQUFZTCxHQUFaLEVBQWlCLEdBQWpCLENBQVIsQ0FBUDtBQUNEOztBQUVELFNBQVNWLG9CQUFULENBQThCZ0IsS0FBOUIsRUFBcUNDLFNBQXJDLEVBQWdEO0FBQzlDO0FBQ0EsTUFBTUMsY0FBY3pCLEVBQUVzQixTQUFGLENBQVlDLEtBQVosRUFBbUIsTUFBbkIsQ0FBcEI7O0FBRUEsTUFBTUcsVUFBVUYsVUFBVUcsSUFBVixDQUFlO0FBQUEsV0FBUTNCLEVBQUU0QixVQUFGLENBQWFILFdBQWIsRUFBMEJ6QixFQUFFNkIsT0FBRixDQUFVQyxJQUFWLEVBQWdCLE1BQWhCLENBQTFCLENBQVI7QUFBQSxHQUFmLENBQWhCO0FBQ0EsTUFBTUMsZ0JBQWdCTCxVQUFVLENBQUNBLFVBQVV4QixLQUFLOEIsR0FBaEIsRUFBcUJDLE1BQS9CLEdBQXdDLENBQTlEO0FBQ0EsU0FBUVIsWUFBWVMsU0FBWixDQUFzQkgsYUFBdEIsQ0FBUjtBQUNEOztBQUVELFNBQVN2QixTQUFULENBQW1CMkIsSUFBbkIsRUFBeUJDLEtBQXpCLEVBQWdDQyxPQUFoQyxFQUF5QztBQUFBLG9CQUNuQm5DLEtBQUtvQyxLQUFMLENBQVdILElBQVgsQ0FEbUI7QUFBQSxNQUNoQ0ksR0FEZ0MsZUFDaENBLEdBRGdDO0FBQUEsTUFDM0JDLElBRDJCLGVBQzNCQSxJQUQyQjs7QUFFdkMsU0FBT3RDLEtBQUt1QyxJQUFMLENBQVVGLEdBQVYsRUFBZSxDQUFDRixVQUFVbkMsS0FBS3dDLFFBQUwsQ0FBY1AsSUFBZCxFQUFvQkUsT0FBcEIsQ0FBVixHQUF5Q0csSUFBMUMsSUFBa0RKLEtBQWpFLENBQVA7QUFDRCIsImZpbGUiOiJ1dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbXBpbGVkVHlwZSxcbiAgZ2V0VHlwZSxcbiAgc3RyaXBJZ25vcmVkQmFzZVBhdGgsXG4gIGNoYW5nZUV4dFxufTtcblxuZnVuY3Rpb24gZ2V0Q29tcGlsZWRUeXBlKHR5cGUpIHtcbiAgLy8gQWNjZXB0IGFuIG9iamVjdCB3aXRoIGEgJ3R5cGUnIHByb3BlcnR5LCBvciBlbHNlIGFzc3VtZSBhIHN0cmluZ1xuICB0eXBlID0gXy5nZXQodHlwZSwgJ3R5cGUnKSB8fCB0eXBlO1xuXG4gIGNvbnN0IHR5cGVNYXAgPSB7XG4gICAgY3NzOiBbJ3Nhc3MnLCAnbGVzcycsICdzdHlsdXMnXSxcbiAgICBqczogWydjb2ZmZWUnXVxuICB9XG4gIHJldHVybiBfLmZpbmRLZXkodHlwZU1hcCwgdHlwZXMgPT4gXy5pbmNsdWRlcyh0eXBlcywgdHlwZSkpO1xufVxuXG5mdW5jdGlvbiBnZXRUeXBlKGV4dCkge1xuICBjb25zdCB0eXBlTWFwID0ge1xuICAgIGpzOiAnanMnLFxuICAgIGNzczogJ2NzcycsXG4gICAgc2NzczogJ3Nhc3MnLFxuICAgIGxlc3M6ICdsZXNzJyxcbiAgICBzdHlsOiAnc3R5bHVzJyxcbiAgICBjb2ZmZWU6ICdjb2ZmZWUnXG4gIH07XG4gIHJldHVybiB0eXBlTWFwW18udHJpbVN0YXJ0KGV4dCwgJy4nKV07XG59XG5cbmZ1bmN0aW9uIHN0cmlwSWdub3JlZEJhc2VQYXRoKF9wYXRoLCBiYXNlUGF0aHMpIHtcbiAgLy8gUmVtb3ZlIGRvdHMgYW5kIHNsYXNoZXMgdG8gZW5zdXJlIHdlIG5ldmVyIHdyaXRlIGFib3ZlIHJvb3QuXG4gIGNvbnN0IHRyaW1tZWRQYXRoID0gXy50cmltU3RhcnQoX3BhdGgsICcuL1xcXFwnKTtcblxuICBjb25zdCBpZ25vcmVkID0gYmFzZVBhdGhzLmZpbmQoYmFzZSA9PiBfLnN0YXJ0c1dpdGgodHJpbW1lZFBhdGgsIF8udHJpbUVuZChiYXNlLCAnLi9cXFxcJykpKTtcbiAgY29uc3QgaWdub3JlZExlbmd0aCA9IGlnbm9yZWQgPyAoaWdub3JlZCArIHBhdGguc2VwKS5sZW5ndGggOiAwO1xuICByZXR1cm4gIHRyaW1tZWRQYXRoLnN1YnN0cmluZyhpZ25vcmVkTGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gY2hhbmdlRXh0KGZpbGUsIHRvRXh0LCBmcm9tRXh0KSB7XG4gIGNvbnN0IHtkaXIsIG5hbWV9ID0gcGF0aC5wYXJzZShmaWxlKTtcbiAgcmV0dXJuIHBhdGguam9pbihkaXIsIChmcm9tRXh0ID8gcGF0aC5iYXNlbmFtZShmaWxlLCBmcm9tRXh0KSA6IG5hbWUpICsgdG9FeHQpO1xufVxuIl19