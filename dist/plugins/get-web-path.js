'use strict';

var _ = require('lodash');
var path = require('path');
var config = require('../config');

var _require = require('../utils/util'),
    getCompiledType = _require.getCompiledType,
    getType = _require.getType,
    stripIgnoredBasePath = _require.stripIgnoredBasePath;

module.exports = getWebPath;

function getWebPath(refPath, dataFile, groupKey) {
  var ref = path.parse(refPath);
  var type = getType(ref.ext);
  var compiledType = getCompiledType(type);

  if (compiledType) {
    ref.ext = '.' + compiledType;
    ref.base = ref.name + ref.ext;
  }

  var forWrapper = dataFile.name === 'wrapper';
  var basePathStripped = stripIgnoredBasePath(dataFile.dir, config.assetIgnoredBasePaths);
  var prefix = forWrapper ? '' : dataFile.name + '-';
  var pathBase = forWrapper ? '/' + basePathStripped : '';

  // Fix dest for assets that are above the src directory, such as node modules
  var consumerDir = path.dirname(path.relative(path.join(process.cwd(), config.srcDir), dataFile.srcResolved));

  if (process.env.task === 'build') {
    ref.base = prefix + groupKey + '.min' + ref.ext;
    return '/' + path.join(consumerDir, ref.base);
  } else {
    var srcStripped = stripIgnoredBasePath(refPath, config.assetIgnoredBasePaths);
    var dirStripped = path.dirname(srcStripped);
    var uniquePathPortion = _.trimStart(path.relative(consumerDir, dirStripped), path.sep + '.');

    ref.dest = path.join(path.dirname(srcStripped), ref.base);

    if (!dirStripped.startsWith(consumerDir)) {
      ref.dest = path.join(consumerDir, ref.dest);
    }

    return '/' + ref.dest;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wbHVnaW5zL2dldC13ZWItcGF0aC5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsInBhdGgiLCJjb25maWciLCJnZXRDb21waWxlZFR5cGUiLCJnZXRUeXBlIiwic3RyaXBJZ25vcmVkQmFzZVBhdGgiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0V2ViUGF0aCIsInJlZlBhdGgiLCJkYXRhRmlsZSIsImdyb3VwS2V5IiwicmVmIiwicGFyc2UiLCJ0eXBlIiwiZXh0IiwiY29tcGlsZWRUeXBlIiwiYmFzZSIsIm5hbWUiLCJmb3JXcmFwcGVyIiwiYmFzZVBhdGhTdHJpcHBlZCIsImRpciIsImFzc2V0SWdub3JlZEJhc2VQYXRocyIsInByZWZpeCIsInBhdGhCYXNlIiwiY29uc3VtZXJEaXIiLCJkaXJuYW1lIiwicmVsYXRpdmUiLCJqb2luIiwicHJvY2VzcyIsImN3ZCIsInNyY0RpciIsInNyY1Jlc29sdmVkIiwiZW52IiwidGFzayIsInNyY1N0cmlwcGVkIiwiZGlyU3RyaXBwZWQiLCJ1bmlxdWVQYXRoUG9ydGlvbiIsInRyaW1TdGFydCIsInNlcCIsImRlc3QiLCJzdGFydHNXaXRoIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLElBQUlDLFFBQVEsUUFBUixDQUFWO0FBQ0EsSUFBTUMsT0FBT0QsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNRSxTQUFTRixRQUFRLFdBQVIsQ0FBZjs7ZUFDeURBLFFBQVEsZUFBUixDO0lBQWxERyxlLFlBQUFBLGU7SUFBaUJDLE8sWUFBQUEsTztJQUFTQyxvQixZQUFBQSxvQjs7QUFFakNDLE9BQU9DLE9BQVAsR0FBaUJDLFVBQWpCOztBQUVBLFNBQVNBLFVBQVQsQ0FBb0JDLE9BQXBCLEVBQTZCQyxRQUE3QixFQUF1Q0MsUUFBdkMsRUFBaUQ7QUFDL0MsTUFBTUMsTUFBTVgsS0FBS1ksS0FBTCxDQUFXSixPQUFYLENBQVo7QUFDQSxNQUFNSyxPQUFPVixRQUFRUSxJQUFJRyxHQUFaLENBQWI7QUFDQSxNQUFNQyxlQUFlYixnQkFBZ0JXLElBQWhCLENBQXJCOztBQUVBLE1BQUlFLFlBQUosRUFBa0I7QUFDaEJKLFFBQUlHLEdBQUosR0FBVSxNQUFNQyxZQUFoQjtBQUNBSixRQUFJSyxJQUFKLEdBQVdMLElBQUlNLElBQUosR0FBV04sSUFBSUcsR0FBMUI7QUFDRDs7QUFFRCxNQUFNSSxhQUFhVCxTQUFTUSxJQUFULEtBQWtCLFNBQXJDO0FBQ0EsTUFBTUUsbUJBQW1CZixxQkFBcUJLLFNBQVNXLEdBQTlCLEVBQW1DbkIsT0FBT29CLHFCQUExQyxDQUF6QjtBQUNBLE1BQU1DLFNBQVNKLGFBQWEsRUFBYixHQUFrQlQsU0FBU1EsSUFBVCxHQUFnQixHQUFqRDtBQUNBLE1BQU1NLFdBQVdMLGFBQWEsTUFBTUMsZ0JBQW5CLEdBQXNDLEVBQXZEOztBQUVBO0FBQ0EsTUFBTUssY0FBY3hCLEtBQUt5QixPQUFMLENBQWF6QixLQUFLMEIsUUFBTCxDQUFjMUIsS0FBSzJCLElBQUwsQ0FBVUMsUUFBUUMsR0FBUixFQUFWLEVBQXlCNUIsT0FBTzZCLE1BQWhDLENBQWQsRUFBdURyQixTQUFTc0IsV0FBaEUsQ0FBYixDQUFwQjs7QUFFQSxNQUFJSCxRQUFRSSxHQUFSLENBQVlDLElBQVosS0FBcUIsT0FBekIsRUFBa0M7QUFDaEN0QixRQUFJSyxJQUFKLEdBQVdNLFNBQVNaLFFBQVQsR0FBb0IsTUFBcEIsR0FBNkJDLElBQUlHLEdBQTVDO0FBQ0EsV0FBTyxNQUFNZCxLQUFLMkIsSUFBTCxDQUFVSCxXQUFWLEVBQXVCYixJQUFJSyxJQUEzQixDQUFiO0FBQ0QsR0FIRCxNQUdPO0FBQ0wsUUFBTWtCLGNBQWM5QixxQkFBcUJJLE9BQXJCLEVBQThCUCxPQUFPb0IscUJBQXJDLENBQXBCO0FBQ0EsUUFBTWMsY0FBY25DLEtBQUt5QixPQUFMLENBQWFTLFdBQWIsQ0FBcEI7QUFDQSxRQUFNRSxvQkFBb0J0QyxFQUFFdUMsU0FBRixDQUFZckMsS0FBSzBCLFFBQUwsQ0FBY0YsV0FBZCxFQUEyQlcsV0FBM0IsQ0FBWixFQUFxRG5DLEtBQUtzQyxHQUFMLEdBQVcsR0FBaEUsQ0FBMUI7O0FBRUEzQixRQUFJNEIsSUFBSixHQUFXdkMsS0FBSzJCLElBQUwsQ0FBVTNCLEtBQUt5QixPQUFMLENBQWFTLFdBQWIsQ0FBVixFQUFxQ3ZCLElBQUlLLElBQXpDLENBQVg7O0FBRUEsUUFBSSxDQUFDbUIsWUFBWUssVUFBWixDQUF1QmhCLFdBQXZCLENBQUwsRUFBMEM7QUFDeENiLFVBQUk0QixJQUFKLEdBQVd2QyxLQUFLMkIsSUFBTCxDQUFVSCxXQUFWLEVBQXVCYixJQUFJNEIsSUFBM0IsQ0FBWDtBQUNEOztBQUVELFdBQU8sTUFBTTVCLElBQUk0QixJQUFqQjtBQUNEO0FBQ0YiLCJmaWxlIjoiZ2V0LXdlYi1wYXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGNvbmZpZyA9IHJlcXVpcmUoJy4uL2NvbmZpZycpO1xuY29uc3Qge2dldENvbXBpbGVkVHlwZSwgZ2V0VHlwZSwgc3RyaXBJZ25vcmVkQmFzZVBhdGh9ID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFdlYlBhdGg7XG5cbmZ1bmN0aW9uIGdldFdlYlBhdGgocmVmUGF0aCwgZGF0YUZpbGUsIGdyb3VwS2V5KSB7XG4gIGNvbnN0IHJlZiA9IHBhdGgucGFyc2UocmVmUGF0aCk7XG4gIGNvbnN0IHR5cGUgPSBnZXRUeXBlKHJlZi5leHQpO1xuICBjb25zdCBjb21waWxlZFR5cGUgPSBnZXRDb21waWxlZFR5cGUodHlwZSk7XG5cbiAgaWYgKGNvbXBpbGVkVHlwZSkge1xuICAgIHJlZi5leHQgPSAnLicgKyBjb21waWxlZFR5cGU7XG4gICAgcmVmLmJhc2UgPSByZWYubmFtZSArIHJlZi5leHQ7XG4gIH1cblxuICBjb25zdCBmb3JXcmFwcGVyID0gZGF0YUZpbGUubmFtZSA9PT0gJ3dyYXBwZXInO1xuICBjb25zdCBiYXNlUGF0aFN0cmlwcGVkID0gc3RyaXBJZ25vcmVkQmFzZVBhdGgoZGF0YUZpbGUuZGlyLCBjb25maWcuYXNzZXRJZ25vcmVkQmFzZVBhdGhzKTtcbiAgY29uc3QgcHJlZml4ID0gZm9yV3JhcHBlciA/ICcnIDogZGF0YUZpbGUubmFtZSArICctJztcbiAgY29uc3QgcGF0aEJhc2UgPSBmb3JXcmFwcGVyID8gJy8nICsgYmFzZVBhdGhTdHJpcHBlZCA6ICcnO1xuXG4gIC8vIEZpeCBkZXN0IGZvciBhc3NldHMgdGhhdCBhcmUgYWJvdmUgdGhlIHNyYyBkaXJlY3RvcnksIHN1Y2ggYXMgbm9kZSBtb2R1bGVzXG4gIGNvbnN0IGNvbnN1bWVyRGlyID0gcGF0aC5kaXJuYW1lKHBhdGgucmVsYXRpdmUocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIGNvbmZpZy5zcmNEaXIpLCBkYXRhRmlsZS5zcmNSZXNvbHZlZCkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi50YXNrID09PSAnYnVpbGQnKSB7XG4gICAgcmVmLmJhc2UgPSBwcmVmaXggKyBncm91cEtleSArICcubWluJyArIHJlZi5leHQ7XG4gICAgcmV0dXJuICcvJyArIHBhdGguam9pbihjb25zdW1lckRpciwgcmVmLmJhc2UpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNyY1N0cmlwcGVkID0gc3RyaXBJZ25vcmVkQmFzZVBhdGgocmVmUGF0aCwgY29uZmlnLmFzc2V0SWdub3JlZEJhc2VQYXRocyk7XG4gICAgY29uc3QgZGlyU3RyaXBwZWQgPSBwYXRoLmRpcm5hbWUoc3JjU3RyaXBwZWQpO1xuICAgIGNvbnN0IHVuaXF1ZVBhdGhQb3J0aW9uID0gXy50cmltU3RhcnQocGF0aC5yZWxhdGl2ZShjb25zdW1lckRpciwgZGlyU3RyaXBwZWQpLCBwYXRoLnNlcCArICcuJyk7XG5cbiAgICByZWYuZGVzdCA9IHBhdGguam9pbihwYXRoLmRpcm5hbWUoc3JjU3RyaXBwZWQpLCByZWYuYmFzZSk7XG5cbiAgICBpZiAoIWRpclN0cmlwcGVkLnN0YXJ0c1dpdGgoY29uc3VtZXJEaXIpKSB7XG4gICAgICByZWYuZGVzdCA9IHBhdGguam9pbihjb25zdW1lckRpciwgcmVmLmRlc3QpO1xuICAgIH1cblxuICAgIHJldHVybiAnLycgKyByZWYuZGVzdDtcbiAgfVxufVxuIl19