'use strict';

var path = require('path');
var config = require('../config');

var _require = require('../utils/util'),
    getCompiledType = _require.getCompiledType,
    getType = _require.getType,
    stripIgnoredBasePath = _require.stripIgnoredBasePath;

module.exports = normalizeAsset;

function normalizeAsset(ref) {
  ref.type = getType(ref.ext);
  ref.typeDest = ref.type;
  ref.baseDest = ref.base;
  var compiledType = getCompiledType(ref.type);
  if (compiledType) {
    ref.typeDest = compiledType;
    ref.baseDest = ref.name + '.' + ref.typeDest;
  }
  ref.isMinified = ref.isMinified || path.extname(ref.name) === '.min';
  if (ref.isMinified) {
    ref.name = path.basename(ref.name, '.min');
  }
  ref.basePathStripped = stripIgnoredBasePath(ref.baseDir, config.assetIgnoredBasePaths);

  // set dest directory
  ref.srcStripped = stripIgnoredBasePath(ref.src, config.assetIgnoredBasePaths);
  ref.dirDest = path.join(config.destDir, path.dirname(ref.srcStripped));

  if (process.env.task === 'build' && !ref.isMinified) {
    ref.baseDest = ref.name + '.min.' + ref.typeDest;
  }

  ref.dest = path.join(ref.dirDest, ref.baseDest);
  ref.destResolved = path.resolve(ref.dest);

  return ref;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wbHVnaW5zL25vcm1hbGl6ZS1hc3NldC5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsImNvbmZpZyIsImdldENvbXBpbGVkVHlwZSIsImdldFR5cGUiLCJzdHJpcElnbm9yZWRCYXNlUGF0aCIsIm1vZHVsZSIsImV4cG9ydHMiLCJub3JtYWxpemVBc3NldCIsInJlZiIsInR5cGUiLCJleHQiLCJ0eXBlRGVzdCIsImJhc2VEZXN0IiwiYmFzZSIsImNvbXBpbGVkVHlwZSIsIm5hbWUiLCJpc01pbmlmaWVkIiwiZXh0bmFtZSIsImJhc2VuYW1lIiwiYmFzZVBhdGhTdHJpcHBlZCIsImJhc2VEaXIiLCJhc3NldElnbm9yZWRCYXNlUGF0aHMiLCJzcmNTdHJpcHBlZCIsInNyYyIsImRpckRlc3QiLCJqb2luIiwiZGVzdERpciIsImRpcm5hbWUiLCJwcm9jZXNzIiwiZW52IiwidGFzayIsImRlc3QiLCJkZXN0UmVzb2x2ZWQiLCJyZXNvbHZlIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLE9BQU9DLFFBQVEsTUFBUixDQUFiO0FBQ0EsSUFBTUMsU0FBU0QsUUFBUSxXQUFSLENBQWY7O2VBQ3lEQSxRQUFRLGVBQVIsQztJQUFsREUsZSxZQUFBQSxlO0lBQWlCQyxPLFlBQUFBLE87SUFBU0Msb0IsWUFBQUEsb0I7O0FBRWpDQyxPQUFPQyxPQUFQLEdBQWlCQyxjQUFqQjs7QUFFQSxTQUFTQSxjQUFULENBQXdCQyxHQUF4QixFQUE2QjtBQUMzQkEsTUFBSUMsSUFBSixHQUFXTixRQUFRSyxJQUFJRSxHQUFaLENBQVg7QUFDQUYsTUFBSUcsUUFBSixHQUFlSCxJQUFJQyxJQUFuQjtBQUNBRCxNQUFJSSxRQUFKLEdBQWVKLElBQUlLLElBQW5CO0FBQ0EsTUFBTUMsZUFBZVosZ0JBQWdCTSxJQUFJQyxJQUFwQixDQUFyQjtBQUNBLE1BQUlLLFlBQUosRUFBa0I7QUFDaEJOLFFBQUlHLFFBQUosR0FBZUcsWUFBZjtBQUNBTixRQUFJSSxRQUFKLEdBQWVKLElBQUlPLElBQUosR0FBVyxHQUFYLEdBQWlCUCxJQUFJRyxRQUFwQztBQUNEO0FBQ0RILE1BQUlRLFVBQUosR0FBaUJSLElBQUlRLFVBQUosSUFBa0JqQixLQUFLa0IsT0FBTCxDQUFhVCxJQUFJTyxJQUFqQixNQUEyQixNQUE5RDtBQUNBLE1BQUlQLElBQUlRLFVBQVIsRUFBb0I7QUFDbEJSLFFBQUlPLElBQUosR0FBV2hCLEtBQUttQixRQUFMLENBQWNWLElBQUlPLElBQWxCLEVBQXdCLE1BQXhCLENBQVg7QUFDRDtBQUNEUCxNQUFJVyxnQkFBSixHQUF1QmYscUJBQXFCSSxJQUFJWSxPQUF6QixFQUFrQ25CLE9BQU9vQixxQkFBekMsQ0FBdkI7O0FBRUE7QUFDQWIsTUFBSWMsV0FBSixHQUFrQmxCLHFCQUFxQkksSUFBSWUsR0FBekIsRUFBOEJ0QixPQUFPb0IscUJBQXJDLENBQWxCO0FBQ0FiLE1BQUlnQixPQUFKLEdBQWN6QixLQUFLMEIsSUFBTCxDQUFVeEIsT0FBT3lCLE9BQWpCLEVBQTBCM0IsS0FBSzRCLE9BQUwsQ0FBYW5CLElBQUljLFdBQWpCLENBQTFCLENBQWQ7O0FBRUEsTUFBSU0sUUFBUUMsR0FBUixDQUFZQyxJQUFaLEtBQXFCLE9BQXJCLElBQWdDLENBQUN0QixJQUFJUSxVQUF6QyxFQUFxRDtBQUNuRFIsUUFBSUksUUFBSixHQUFlSixJQUFJTyxJQUFKLEdBQVcsT0FBWCxHQUFxQlAsSUFBSUcsUUFBeEM7QUFDRDs7QUFFREgsTUFBSXVCLElBQUosR0FBV2hDLEtBQUswQixJQUFMLENBQVVqQixJQUFJZ0IsT0FBZCxFQUF1QmhCLElBQUlJLFFBQTNCLENBQVg7QUFDQUosTUFBSXdCLFlBQUosR0FBbUJqQyxLQUFLa0MsT0FBTCxDQUFhekIsSUFBSXVCLElBQWpCLENBQW5COztBQUVBLFNBQU92QixHQUFQO0FBQ0QiLCJmaWxlIjoibm9ybWFsaXplLWFzc2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGNvbmZpZyA9IHJlcXVpcmUoJy4uL2NvbmZpZycpO1xuY29uc3Qge2dldENvbXBpbGVkVHlwZSwgZ2V0VHlwZSwgc3RyaXBJZ25vcmVkQmFzZVBhdGh9ID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vcm1hbGl6ZUFzc2V0O1xuXG5mdW5jdGlvbiBub3JtYWxpemVBc3NldChyZWYpIHtcbiAgcmVmLnR5cGUgPSBnZXRUeXBlKHJlZi5leHQpO1xuICByZWYudHlwZURlc3QgPSByZWYudHlwZTtcbiAgcmVmLmJhc2VEZXN0ID0gcmVmLmJhc2U7XG4gIGNvbnN0IGNvbXBpbGVkVHlwZSA9IGdldENvbXBpbGVkVHlwZShyZWYudHlwZSk7XG4gIGlmIChjb21waWxlZFR5cGUpIHtcbiAgICByZWYudHlwZURlc3QgPSBjb21waWxlZFR5cGU7XG4gICAgcmVmLmJhc2VEZXN0ID0gcmVmLm5hbWUgKyAnLicgKyByZWYudHlwZURlc3Q7XG4gIH1cbiAgcmVmLmlzTWluaWZpZWQgPSByZWYuaXNNaW5pZmllZCB8fCBwYXRoLmV4dG5hbWUocmVmLm5hbWUpID09PSAnLm1pbic7XG4gIGlmIChyZWYuaXNNaW5pZmllZCkge1xuICAgIHJlZi5uYW1lID0gcGF0aC5iYXNlbmFtZShyZWYubmFtZSwgJy5taW4nKTtcbiAgfVxuICByZWYuYmFzZVBhdGhTdHJpcHBlZCA9IHN0cmlwSWdub3JlZEJhc2VQYXRoKHJlZi5iYXNlRGlyLCBjb25maWcuYXNzZXRJZ25vcmVkQmFzZVBhdGhzKTtcblxuICAvLyBzZXQgZGVzdCBkaXJlY3RvcnlcbiAgcmVmLnNyY1N0cmlwcGVkID0gc3RyaXBJZ25vcmVkQmFzZVBhdGgocmVmLnNyYywgY29uZmlnLmFzc2V0SWdub3JlZEJhc2VQYXRocyk7XG4gIHJlZi5kaXJEZXN0ID0gcGF0aC5qb2luKGNvbmZpZy5kZXN0RGlyLCBwYXRoLmRpcm5hbWUocmVmLnNyY1N0cmlwcGVkKSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52LnRhc2sgPT09ICdidWlsZCcgJiYgIXJlZi5pc01pbmlmaWVkKSB7XG4gICAgcmVmLmJhc2VEZXN0ID0gcmVmLm5hbWUgKyAnLm1pbi4nICsgcmVmLnR5cGVEZXN0O1xuICB9XG5cbiAgcmVmLmRlc3QgPSBwYXRoLmpvaW4ocmVmLmRpckRlc3QsIHJlZi5iYXNlRGVzdCk7XG4gIHJlZi5kZXN0UmVzb2x2ZWQgPSBwYXRoLnJlc29sdmUocmVmLmRlc3QpO1xuXG4gIHJldHVybiByZWY7XG59XG4iXX0=