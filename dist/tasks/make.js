'use strict';

var _ = require('lodash');
var path = require('path');
var bluebird = require('bluebird');
var fs = bluebird.promisifyAll(require('fs-extra'));
var clean = require('./clean');
var requireDir = require('require-dir');
var plugins = requireDir('../plugins', { camelcase: true });
var cache = require('../utils/cache');
var config = require('../config');

module.exports = make;

function make(opts) {
  var task = process.env.task || 'make';

  if (opts && opts.targeted && opts.assets) {
    return run(opts.assets);
  }

  cache.clear();

  clean();

  cache.set('files', 'srcResolved', plugins.normalize(fs.walkSync(config.srcDir)));

  _(cache.get('deps')).filter({ role: 'asset' }).forEach(function (dep) {
    var asset = cache.get('files')[dep.srcResolved];
    if (!asset) {
      asset = plugins.normalize([dep.src])[0];
      cache.set('files', 'srcResolved', asset);
    }
    asset.role = 'asset';
    asset.isMinified = asset.isMinified || dep.isMinified;
  });

  // We should remove passive assets from the file cache by this point

  _(cache.get('files')).filter({ role: 'template' }).forEach(plugins.static);

  return run();

  function run(assets) {
    var transformAssets = runTransformAssets(assets || _.filter(cache.get('files'), { role: 'asset' }));

    return Promise.all(transformAssets).then(function () {
      var deps = _.filter(cache.get('deps'), function (dep) {
        return dep.role === 'asset';
      });
      if (assets) {
        (function () {
          var assetSources = _.map(assets, 'srcResolved');
          deps = deps.reduce(function (acc, dep) {
            if (_.includes(assetSources, dep.srcResolved)) {
              acc.push(dep);
            }
            return acc;
          }, []);
        })();
      }
      return Promise.all(_.castArray(runGenerateDeps(deps)));
    }).then(function (result) {
      return Promise.all(_.flatten(result));
    }).then(function () {
      return Promise.all(_.filter(assets || cache.get('files'), function (f) {
        return !f.role;
      }).map(function (asset) {
        var dest = path.join(config.destDir, asset.srcStripped);
        return fs.copyAsync(asset.src, dest);
      }));
    });
  }

  function runTransformAssets(assets) {
    return _(assets).flow(plugins.normalizeAsset, !_.get(opts, 'targeted')).flow(plugins.read).flow(plugins.transpile, function (a) {
      return !a.isMinified;
    }).flowTap(plugins.cacheImport, function (a) {
      return !a.isMinified;
    }).flow(plugins.copySource).flow(plugins.minify, function (a) {
      return !a.isMinified;
    }, task === 'build').flow(plugins.remapSources, function (a) {
      return a.map;
    }).value();
  }

  function runGenerateDeps(deps) {
    return _(deps).flow(plugins.normalizeDep).flow(plugins.getAssetContent).flowAll(plugins.concat, task === 'build').flow(plugins.outputSourcemaps).flow(plugins.output).value();
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90YXNrcy9tYWtlLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwicGF0aCIsImJsdWViaXJkIiwiZnMiLCJwcm9taXNpZnlBbGwiLCJjbGVhbiIsInJlcXVpcmVEaXIiLCJwbHVnaW5zIiwiY2FtZWxjYXNlIiwiY2FjaGUiLCJjb25maWciLCJtb2R1bGUiLCJleHBvcnRzIiwibWFrZSIsIm9wdHMiLCJ0YXNrIiwicHJvY2VzcyIsImVudiIsInRhcmdldGVkIiwiYXNzZXRzIiwicnVuIiwiY2xlYXIiLCJzZXQiLCJub3JtYWxpemUiLCJ3YWxrU3luYyIsInNyY0RpciIsImdldCIsImZpbHRlciIsInJvbGUiLCJmb3JFYWNoIiwiYXNzZXQiLCJkZXAiLCJzcmNSZXNvbHZlZCIsInNyYyIsImlzTWluaWZpZWQiLCJzdGF0aWMiLCJ0cmFuc2Zvcm1Bc3NldHMiLCJydW5UcmFuc2Zvcm1Bc3NldHMiLCJQcm9taXNlIiwiYWxsIiwidGhlbiIsImRlcHMiLCJhc3NldFNvdXJjZXMiLCJtYXAiLCJyZWR1Y2UiLCJhY2MiLCJpbmNsdWRlcyIsInB1c2giLCJjYXN0QXJyYXkiLCJydW5HZW5lcmF0ZURlcHMiLCJmbGF0dGVuIiwicmVzdWx0IiwiZiIsImRlc3QiLCJqb2luIiwiZGVzdERpciIsInNyY1N0cmlwcGVkIiwiY29weUFzeW5jIiwiZmxvdyIsIm5vcm1hbGl6ZUFzc2V0IiwicmVhZCIsInRyYW5zcGlsZSIsImEiLCJmbG93VGFwIiwiY2FjaGVJbXBvcnQiLCJjb3B5U291cmNlIiwibWluaWZ5IiwicmVtYXBTb3VyY2VzIiwidmFsdWUiLCJub3JtYWxpemVEZXAiLCJnZXRBc3NldENvbnRlbnQiLCJmbG93QWxsIiwiY29uY2F0Iiwib3V0cHV0U291cmNlbWFwcyIsIm91dHB1dCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxJQUFJQyxRQUFRLFFBQVIsQ0FBVjtBQUNBLElBQU1DLE9BQU9ELFFBQVEsTUFBUixDQUFiO0FBQ0EsSUFBTUUs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UTJELE1BTlQsRUFNaUI7QUFBQSxhQUFLLENBQUNKLEVBQUU1QixVQUFSO0FBQUEsS0FOakIsRUFNcUNuQixTQUFTLE9BTjlDLEVBT0oyQyxJQVBJLENBT0NuRCxRQUFRNEQsWUFQVCxFQU91QjtBQUFBLGFBQUtMLEVBQUVuQixHQUFQO0FBQUEsS0FQdkIsRUFRSnlCLEtBUkksRUFBUDtBQVNEOztBQUVELFdBQVNuQixlQUFULENBQXlCUixJQUF6QixFQUErQjtBQUM3QixXQUFPMUMsRUFBRTBDLElBQUYsRUFDSmlCLElBREksQ0FDQ25ELFFBQVE4RCxZQURULEVBRUpYLElBRkksQ0FFQ25ELFFBQVErRCxlQUZULEVBR0pDLE9BSEksQ0FHSWhFLFFBQVFpRSxNQUhaLEVBR29CekQsU0FBUyxPQUg3QixFQUlKMkMsSUFKSSxDQUlDbkQsUUFBUWtFLGdCQUpULEVBS0pmLElBTEksQ0FLQ25ELFFBQVFtRSxNQUxULEVBTUpOLEtBTkksRUFBUDtBQU9EO0FBQ0YiLCJmaWxlIjoibWFrZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBibHVlYmlyZCA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5jb25zdCBmcyA9IGJsdWViaXJkLnByb21pc2lmeUFsbChyZXF1aXJlKCdmcy1leHRyYScpKTtcbmNvbnN0IGNsZWFuID0gcmVxdWlyZSgnLi9jbGVhbicpO1xuY29uc3QgcmVxdWlyZURpciA9IHJlcXVpcmUoJ3JlcXVpcmUtZGlyJyk7XG5jb25zdCBwbHVnaW5zID0gcmVxdWlyZURpcignLi4vcGx1Z2lucycsIHtjYW1lbGNhc2U6IHRydWV9KTtcbmNvbnN0IGNhY2hlID0gcmVxdWlyZSgnLi4vdXRpbHMvY2FjaGUnKTtcbmNvbnN0IGNvbmZpZyA9IHJlcXVpcmUoJy4uL2NvbmZpZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1ha2U7XG5cbmZ1bmN0aW9uIG1ha2Uob3B0cykge1xuICBjb25zdCB0YXNrID0gcHJvY2Vzcy5lbnYudGFzayB8fCAnbWFrZSc7XG5cbiAgaWYgKG9wdHMgJiYgb3B0cy50YXJnZXRlZCAmJiBvcHRzLmFzc2V0cykge1xuICAgIHJldHVybiBydW4ob3B0cy5hc3NldHMpO1xuICB9XG5cbiAgY2FjaGUuY2xlYXIoKTtcblxuICBjbGVhbigpO1xuXG4gIGNhY2hlLnNldCgnZmlsZXMnLCAnc3JjUmVzb2x2ZWQnLCBwbHVnaW5zLm5vcm1hbGl6ZShmcy53YWxrU3luYyhjb25maWcuc3JjRGlyKSkpO1xuXG4gIF8oY2FjaGUuZ2V0KCdkZXBzJykpXG4gICAgLmZpbHRlcih7cm9sZTogJ2Fzc2V0J30pXG4gICAgLmZvckVhY2goZGVwID0+IHtcbiAgICAgIGxldCBhc3NldCA9IGNhY2hlLmdldCgnZmlsZXMnKVtkZXAuc3JjUmVzb2x2ZWRdO1xuICAgICAgaWYgKCFhc3NldCkge1xuICAgICAgICBhc3NldCA9IHBsdWdpbnMubm9ybWFsaXplKFtkZXAuc3JjXSlbMF07XG4gICAgICAgIGNhY2hlLnNldCgnZmlsZXMnLCAnc3JjUmVzb2x2ZWQnLCBhc3NldCk7XG4gICAgICB9XG4gICAgICBhc3NldC5yb2xlID0gJ2Fzc2V0JztcbiAgICAgIGFzc2V0LmlzTWluaWZpZWQgPSBhc3NldC5pc01pbmlmaWVkIHx8IGRlcC5pc01pbmlmaWVkO1xuICAgIH0pO1xuXG4gIC8vIFdlIHNob3VsZCByZW1vdmUgcGFzc2l2ZSBhc3NldHMgZnJvbSB0aGUgZmlsZSBjYWNoZSBieSB0aGlzIHBvaW50XG5cbiAgXyhjYWNoZS5nZXQoJ2ZpbGVzJykpLmZpbHRlcih7cm9sZTogJ3RlbXBsYXRlJ30pLmZvckVhY2gocGx1Z2lucy5zdGF0aWMpO1xuXG5cbiAgcmV0dXJuIHJ1bigpO1xuXG4gIGZ1bmN0aW9uIHJ1bihhc3NldHMpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1Bc3NldHMgPSBydW5UcmFuc2Zvcm1Bc3NldHMoYXNzZXRzIHx8IF8uZmlsdGVyKGNhY2hlLmdldCgnZmlsZXMnKSwge3JvbGU6ICdhc3NldCd9KSk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwodHJhbnNmb3JtQXNzZXRzKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBsZXQgZGVwcyA9IF8uZmlsdGVyKGNhY2hlLmdldCgnZGVwcycpLCBkZXAgPT4gZGVwLnJvbGUgPT09ICdhc3NldCcpO1xuICAgICAgICBpZiAoYXNzZXRzKSB7XG4gICAgICAgICAgY29uc3QgYXNzZXRTb3VyY2VzID0gXy5tYXAoYXNzZXRzLCAnc3JjUmVzb2x2ZWQnKTtcbiAgICAgICAgICBkZXBzID0gZGVwcy5yZWR1Y2UoKGFjYywgZGVwKSA9PiB7XG4gICAgICAgICAgICBpZiAoXy5pbmNsdWRlcyhhc3NldFNvdXJjZXMsIGRlcC5zcmNSZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgYWNjLnB1c2goZGVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgfSwgW10pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChfLmNhc3RBcnJheShydW5HZW5lcmF0ZURlcHMoZGVwcykpKVxuICAgICAgfSlcbiAgICAgIC50aGVuKHJlc3VsdCA9PiBQcm9taXNlLmFsbChfLmZsYXR0ZW4ocmVzdWx0KSkpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChfLmZpbHRlcihhc3NldHMgfHwgY2FjaGUuZ2V0KCdmaWxlcycpLCBmID0+ICFmLnJvbGUpLm1hcChhc3NldCA9PiB7XG4gICAgICAgICAgY29uc3QgZGVzdCA9IHBhdGguam9pbihjb25maWcuZGVzdERpciwgYXNzZXQuc3JjU3RyaXBwZWQpO1xuICAgICAgICAgIHJldHVybiBmcy5jb3B5QXN5bmMoYXNzZXQuc3JjLCBkZXN0KTtcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBydW5UcmFuc2Zvcm1Bc3NldHMoYXNzZXRzKSB7XG4gICAgcmV0dXJuIF8oYXNzZXRzKVxuICAgICAgLmZsb3cocGx1Z2lucy5ub3JtYWxpemVBc3NldCwgIV8uZ2V0KG9wdHMsICd0YXJnZXRlZCcpKVxuICAgICAgLmZsb3cocGx1Z2lucy5yZWFkKVxuICAgICAgLmZsb3cocGx1Z2lucy50cmFuc3BpbGUsIGEgPT4gIWEuaXNNaW5pZmllZClcbiAgICAgIC5mbG93VGFwKHBsdWdpbnMuY2FjaGVJbXBvcnQsIGEgPT4gIWEuaXNNaW5pZmllZClcbiAgICAgIC5mbG93KHBsdWdpbnMuY29weVNvdXJjZSlcbiAgICAgIC5mbG93KHBsdWdpbnMubWluaWZ5LCBhID0+ICFhLmlzTWluaWZpZWQsIHRhc2sgPT09ICdidWlsZCcpXG4gICAgICAuZmxvdyhwbHVnaW5zLnJlbWFwU291cmNlcywgYSA9PiBhLm1hcClcbiAgICAgIC52YWx1ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuR2VuZXJhdGVEZXBzKGRlcHMpIHtcbiAgICByZXR1cm4gXyhkZXBzKVxuICAgICAgLmZsb3cocGx1Z2lucy5ub3JtYWxpemVEZXApXG4gICAgICAuZmxvdyhwbHVnaW5zLmdldEFzc2V0Q29udGVudClcbiAgICAgIC5mbG93QWxsKHBsdWdpbnMuY29uY2F0LCB0YXNrID09PSAnYnVpbGQnKVxuICAgICAgLmZsb3cocGx1Z2lucy5vdXRwdXRTb3VyY2VtYXBzKVxuICAgICAgLmZsb3cocGx1Z2lucy5vdXRwdXQpXG4gICAgICAudmFsdWUoKTtcbiAgfVxufVxuIl19